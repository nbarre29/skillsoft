const array1 = [1, 4, 9, 16];

// Pass a function to map
const map1 = array1.map((x) => x * 2);

console.log(map1); // Expected output: Array [2, 8, 18, 32]

-----------------------------------------------------------
const words = [
  "spray",
  "limit",
  "elite",
  "exuberant",
  "destruction",
  "present",
];

const result = words.map((word) => word.toUpperCase());

console.log(result);
-----------------------------------------------------------
//takes an array of objects and creates a new array containing the newly reformatted objects.

const kvArray = [
  { key: 1, value: 10 },
  { key: 2, value: 20 },
  { key: 3, value: 30 },
];

const reformattedArray = kvArray.map(({ key, value }) => ({ [key]: value }));

console.log(reformattedArray); // [ { '1': 10 }, { '2': 20 }, { '3': 30 } ]
console.log(kvArray); // [ { key: 1, value: 10 }, { key: 2, value: 20 }, { key: 3, value: 30 } ]

___________________________________________________________

//uses filter() to create a filtered array that has all elements with values less than 10 removed.
function isBigEnough(value) {
  return value >= 10;
}

const filtered = [12, 5, 8, 130, 44].filter(isBigEnough);

console.log(filtered);  //[ 12, 130, 44 ]
-----------------------------------------------------------
//in Typescript
function isBigEnough(value: number): boolean {
  return value >= 10;
}

const filtered: number[] = [12, 5, 8, 130, 44].filter(isBigEnough);

console.log(filtered);  //[ 12, 130, 44 ]
-----------------------------------------------------------
//uses filter() to filter array content based on search criteria.
const fruits = ["apple", "banana", "grapes", "mango", "orange"];

/**
 * Filter array items based on search criteria (query)
 */
function filterItems(arr, query) {
  return arr.filter((el) => el.toLowerCase().includes(query.toLowerCase()));
}

console.log(filterItems(fruits, "ap")); // ['apple', 'grapes']
console.log(filterItems(fruits, "an")); // ['banana', 'mango', 'orange']
-----------------------------------------------------------
//Typescript
//uses filter() to filter array content based on search criteria.
const fruits: string[] = ["apple", "banana", "grapes", "mango", "orange"];

/**
 * Filter array items based on search criteria (query)
 */
function filterItems(arr: string[], query: string): string[] {
  return arr.filter((el) => el.toLowerCase().includes(query.toLowerCase()));
}

console.log(filterItems(fruits, "ap")); // ['apple', 'grapes']
console.log(filterItems(fruits, "an")); // ['banana', 'mango', 'orange']
___________________________________________________________
//The Object.keys() method returns an array of a given object's own enumerable string-keyed property names.

const object1 = {
  a: "somestring",
  b: 42,
  c: false,
};

console.log(Object.keys(object1)); //[ 'a', 'b', 'c' ]
-----------------------------------------------------------
//The Object.keys() method in JavaScript is used to extract the keys (property names) from an object and return them as an array.
const person = {
  name: "John",
  age: 30,
  city: "New York",
};

const keys = Object.keys(person);
keys.forEach((key) => {
  console.log(key, person[key]);
});

//output
name John
age 30
city New York
-----------------------------------------------------------
const person = {
  name: "John",
  age: 30,
  city: "New York",
};

const keys = Object.keys(person);
for (const key of keys) {
  console.log(`${key}: ${person[key]}`);
}

//output
name John
age 30
city New York
-----------------------------------------------------------
//You can use Object.keys() to check if an object contains a particular property.
const student = {
  name: "Alice",
  age: 25,
};

const hasAge = Object.keys(student).includes("age");
console.log(`Has age property: ${hasAge}`); //Has age property: true
-----------------------------------------------------------
//Getting the Number of Properties in an Object:
//If you need to count the number of properties in an object, you can use Object.keys().length.
const car = {
  make: "Toyota",
  model: "Camry",
  year: 2020,
};

const numProperties = Object.keys(car).length;
console.log(`Number of properties: ${numProperties}`); //Number of properties: 3
-----------------------------------------------------------

//The Object.values() method returns an array of a given object's own enumerable string-keyed property values.

const object1 = {
  a: "somestring",
  b: 42,
  c: false,
};

console.log(Object.values(object1)); //[ 'somestring', 42, false ]
-----------------------------------------------------------
//Calculating the Sum of Object Values:
const expenses = { rent: 1000, utilities: 200, groceries: 300 };
const totalExpense = Object.values(expenses).reduce(
  (acc, expense) => acc + expense,
  0
);
console.log(totalExpense); //1500
-----------------------------------------------------------
//Typescript
const expenses: { [key: string]: number } = {
  rent: 1000,
  utilities: 200,
  groceries: 300,
};

const totalExpense: number = Object.values(expenses).reduce(
  (acc, expense) => acc + expense,
  0
);

console.log(totalExpense);
-----------------------------------------------------------
The reduce() method of Array instances executes a user-supplied "reducer" callback function on each element of the array, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the array is a single value.
The first time that the callback is run there is no "return value of the previous calculation". If supplied, an initial value may be used in its place. Otherwise the array element at index 0 is used as the initial value and iteration starts from the next element (index 1 instead of index 0).


const array1 = [1, 2, 3, 4];

// 0 + 1 + 2 + 3 + 4
const initialValue = 0;
const sumWithInitial = array1.reduce(
  (accumulator, currentValue) => accumulator + currentValue,
  initialValue
);

console.log(sumWithInitial); //10

The reducer walks through the array element-by-element, at each step adding the current array value to the result from the previous step (this result is the running sum of all the previous steps) â€” until there are no more elements to add.

Syntax:
reduce(callbackFn)
reduce(callbackFn, initialValue)

callbackFn
A function to execute for each element in the array. Its return value becomes the value of the accumulator parameter on the next invocation of callbackFn. For the last invocation, the return value becomes the return value of reduce(). The function is called with the following arguments:

accumulator
The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is array[0].

currentValue
The value of the current element. On the first call, its value is array[0] if initialValue is specified; otherwise its value is array[1].
-----------------------------------------------------------
//Typescript
const array1: number[] = [1, 2, 3, 4];

// 0 + 1 + 2 + 3 + 4
const initialValue: number = 0;
const sumWithInitial: number = array1.reduce(
  (accumulator, currentValue) => accumulator + currentValue,
  initialValue
);

console.log(sumWithInitial); //10

___________________________________________________________
//In TypeScript, you can define an object with a string index as follows:
const myObject: { [key: string]: number } = {
  one: 1,
  two: 2,
  three: 3,
};
//retrieve values using string keys:
console.log(myObject["one"]); // 1
console.log(myObject["two"]); // 2

In this example, myObject is an object with string keys and numeric values. The type annotation { [key: string]: number } indicates that the keys should be strings, and the values should be numbers.
-----------------------------------------------------------
//In TypeScript, you can define an object with a numeric index as follows:
const myObject: { [key: number]: number } = {
  0: 10,
  1: 20,
  2: 30,
};

console.log(myObject[0]); // 10
console.log(myObject[1]); // 20

In this example, myObject is an object with numeric keys and numeric values. The type annotation { [key: number]: number } specifies that the keys should be numbers, and the values should also be numbers.

This is useful when you need to create objects with numeric indices, which can be thought of as similar to arrays, but with arbitrary numeric keys.
___________________________________________________________












